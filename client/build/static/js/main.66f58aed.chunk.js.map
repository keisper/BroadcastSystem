{"version":3,"sources":["routes/CreateRoom.js","routes/Room.js","routes/Record.js","App.js","serviceWorker.js","index.js"],"names":["CreateRoom","props","onClick","id","uuid","history","push","Container","styled","div","StyledVideo","video","Video","ref","useRef","useEffect","peer","on","stream","current","srcObject","playsInline","autoPlay","videoConstraints","height","window","innerHeight","width","innerWidth","Room","useState","peers","setPeers","socketRef","userVideo","screenVideo","peersRef","roomID","match","params","useScreenRecording","isRecording","recording","toggleRecording","io","connect","navigator","mediaDevices","getUserMedia","audio","then","getDisplayMedia","stream2","console","log","emit","users","forEach","userID","userToSignal","callerID","Peer","initiator","trickle","signal","createPeer","peerID","payload","incomingSignal","addPeer","find","p","src","URL","createObjectURL","muted","map","index","key","RecordView","render","status","startRecording","stopRecording","mediaBlobUrl","controls","autoplay","loop","App","path","exact","component","Boolean","location","hostname","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.66f58aed.chunk.js","sourcesContent":["import React from \"react\";\nimport { v1 as uuid } from \"uuid\";\n\nconst CreateRoom = (props) => {\n    function create() {\n        const id = uuid();\n        props.history.push(`/room/${id}`);\n    }\n\n    return (\n        <button onClick={create}>Create room</button>\n    );\n};\n\nexport default CreateRoom;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport styled from \"styled-components\";\nimport useScreenRecording from \"use-screen-recording\";\n\nconst Container = styled.div`\n    padding: 20px;\n    display: flex;\n    height: 100vh;\n    width: 90%;\n    margin: auto;\n    flex-wrap: wrap;\n`;\n\nconst StyledVideo = styled.video`\n    height: 40%;\n    width: 50%;\n`;\n\nconst Video = (props) => {\n    const ref = useRef();\n\n    useEffect(() => {\n        props.peer.on(\"stream\", stream => {\n            ref.current.srcObject = stream;\n        })\n    }, []);\n\n    return (\n        <StyledVideo playsInline autoPlay ref={ref} />\n    );\n}\n\n\nconst videoConstraints = {\n    height: window.innerHeight / 2,\n    width: window.innerWidth / 2\n};\n/*const RecordView = () => (\n    <div>\n        <ReactMediaRecorder\n            video\n            render={({ status, startRecording, stopRecording, mediaBlobUrl }) => (\n                <div>\n                    <p>{status}</p>\n                    <button onClick={startRecording}>Start Recording</button>\n                    <button onClick={stopRecording}>Stop Recording</button>\n                    <video src={mediaBlobUrl} controls autoplay loop />\n                </div>\n            )}\n        />\n    </div>\n);*/\n\n\nconst Room = (props) => {\n    const [peers, setPeers] = useState([]);\n    const socketRef = useRef();\n    const userVideo = useRef();\n    const screenVideo = useRef();\n    const peersRef = useRef([]);\n    const roomID = props.match.params.roomID;\n    const { isRecording, recording, toggleRecording } = useScreenRecording();\n\n    useEffect(() => {\n        socketRef.current = io.connect(\"/\");\n        navigator.mediaDevices.getUserMedia({ video: videoConstraints, audio: true }).then(stream => {\n            navigator.mediaDevices.getDisplayMedia({\n                video: true\n            }).then(\n                stream2 => {\n                    console.log(stream2);\n                    screenVideo.current.srcObject = stream2;\n                    userVideo.current.srcObject = stream;\n                    socketRef.current.emit(\"join room\", roomID);\n                    socketRef.current.on(\"all users\", users => {\n                        const peers = [];\n                        users.forEach(userID => {\n                            const peer = createPeer(userID, socketRef.current.id, stream);\n                            peersRef.current.push({\n                                peerID: userID,\n                                peer,\n                            })\n                            peers.push(peer);\n                        })\n                        setPeers(peers);\n                    })\n\n                    socketRef.current.on(\"user joined\", payload => {\n                        const peer = addPeer(payload.signal, payload.callerID, stream);\n                        peersRef.current.push({\n                            peerID: payload.callerID,\n                            peer,\n                        })\n\n                        setPeers(users => [...users, peer]);\n                    });\n\n                    socketRef.current.on(\"receiving returned signal\", payload => {\n                        const item = peersRef.current.find(p => p.peerID === payload.id);\n                        item.peer.signal(payload.signal);\n                    });\n                }\n            );\n\n\n        })\n    }, []);\n\n    function createPeer(userToSignal, callerID, stream) {\n        const peer = new Peer({\n            initiator: true,\n            trickle: false,\n            stream,\n        });\n\n        peer.on(\"signal\", signal => {\n            socketRef.current.emit(\"sending signal\", { userToSignal, callerID, signal })\n        })\n\n        return peer;\n    }\n\n    function addPeer(incomingSignal, callerID, stream) {\n        const peer = new Peer({\n            initiator: false,\n            trickle: false,\n            stream,\n        })\n\n        peer.on(\"signal\", signal => {\n            socketRef.current.emit(\"returning signal\", { signal, callerID })\n        })\n\n        peer.signal(incomingSignal);\n\n        return peer;\n    }\n    function f(t) {\n        console.log(userVideo)\n    }\n    return (\n        <Container>\n            <div>\n                <button onClick={toggleRecording}>\n                    {isRecording ? \"Stop\" : \"Start Recording\"}\n                </button>\n\n                {!!recording && (\n                    <video autoPlay src={recording && URL.createObjectURL(recording)} />\n                )\n                }\n\n                <button onClick={f(recording)}>test </button>\n            </div>\n            <StyledVideo muted ref={userVideo} autoPlay playsInline />\n            <StyledVideo muted ref={screenVideo} autoPlay playsInline />\n            {peers.map((peer, index) => {\n                return (\n                    <Video key={index} peer={peer} />\n                );\n            })}\n        </Container>\n    );\n};\n\n\nexport default Room;\n","import {ReactMediaRecorder} from \"react-media-recorder\";\r\nimport React from \"react\";\r\n\r\n\r\nconst RecordView = () => (\r\n    <div>\r\n        <ReactMediaRecorder\r\n            video\r\n            render={({ status, startRecording, stopRecording, mediaBlobUrl }) => (\r\n                <div>\r\n                    <p>{status}</p>\r\n                    <button onClick={startRecording}>Start Recording</button>\r\n                    <button onClick={stopRecording}>Stop Recording</button>\r\n                    <video src={mediaBlobUrl} controls autoplay loop />\r\n                </div>\r\n            )}\r\n        />\r\n    </div>\r\n);\r\n\r\nexport default RecordView;","import React from 'react';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport CreateRoom from \"./routes/CreateRoom\";\nimport Room from \"./routes/Room\";\nimport Record from \"./routes/Record\";\nimport RecordView from \"./routes/Record\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact component={CreateRoom} />\n        <Route path=\"/room/:roomID\" component={Room} />\n        <Route path=\"/test\" component={RecordView} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}